// <auto-generated />
using System;
using Caifan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Caifan.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220618171412_db_test")]
    partial class db_test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BasketModule", b =>
                {
                    b.Property<int>("BasketsBasketId")
                        .HasColumnType("integer");

                    b.Property<int>("ModulesModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("ModulesUniversityName")
                        .HasColumnType("text");

                    b.HasKey("BasketsBasketId", "ModulesModuleId", "ModulesUniversityName");

                    b.HasIndex("ModulesModuleId", "ModulesUniversityName");

                    b.ToTable("BasketModule");
                });

            modelBuilder.Entity("Caifan.Models.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BasketId"));

                    b.Property<string>("BasketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BasketId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Caifan.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Caifan.Models.Degree", b =>
                {
                    b.Property<string>("DegreeId")
                        .HasColumnType("text");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DegreeId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Caifan.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("UniversityName")
                        .HasColumnType("text");

                    b.Property<int>("BasketId")
                        .HasColumnType("integer");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkToCourseOutline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ModuleId", "UniversityName");

                    b.HasIndex("UniversityName");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Caifan.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Caifan.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniversityName1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId");

                    b.HasIndex("UniversityName1");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Caifan.Models.University", b =>
                {
                    b.Property<string>("UniversityName")
                        .HasColumnType("text");

                    b.Property<string>("AcademicCalendar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AcademicCalendarLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Accommodation")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseCatalogLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreditLoadMax")
                        .HasColumnType("integer");

                    b.Property<int>("CreditLoadMin")
                        .HasColumnType("integer");

                    b.Property<int>("CreditTransferRate")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("GpaRequirement")
                        .HasColumnType("real");

                    b.Property<string>("HostUniversityExchangeWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HostUniversityWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("IgpaNinetyPercentile")
                        .HasColumnType("real");

                    b.Property<float>("IgpaTenPercentile")
                        .HasColumnType("real");

                    b.Property<bool>("Insurance")
                        .HasColumnType("boolean");

                    b.Property<int>("NoOfPlacesSem1")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfPlacesSem2")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Visa")
                        .HasColumnType("boolean");

                    b.Property<int>("WorldRanking")
                        .HasColumnType("integer");

                    b.HasKey("UniversityName");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Caifan.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("DegreeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MobileNo")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordEncrypt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondDegreeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("SecondDegreeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DegreeUniversity", b =>
                {
                    b.Property<string>("DegreesDegreeId")
                        .HasColumnType("text");

                    b.Property<string>("UniversitiesUniversityName")
                        .HasColumnType("text");

                    b.HasKey("DegreesDegreeId", "UniversitiesUniversityName");

                    b.HasIndex("UniversitiesUniversityName");

                    b.ToTable("DegreeUniversity");
                });

            modelBuilder.Entity("BasketModule", b =>
                {
                    b.HasOne("Caifan.Models.Basket", null)
                        .WithMany()
                        .HasForeignKey("BasketsBasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caifan.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesModuleId", "ModulesUniversityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Caifan.Models.Module", b =>
                {
                    b.HasOne("Caifan.Models.University", "University")
                        .WithMany("Modules")
                        .HasForeignKey("UniversityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Caifan.Models.Review", b =>
                {
                    b.HasOne("Caifan.Models.University", "University")
                        .WithMany("Reviews")
                        .HasForeignKey("UniversityName1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caifan.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Caifan.Models.University", b =>
                {
                    b.HasOne("Caifan.Models.Country", "Country")
                        .WithMany("Universities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caifan.Models.Region", "Region")
                        .WithMany("Universities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Caifan.Models.User", b =>
                {
                    b.HasOne("Caifan.Models.Degree", "FirstDegree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caifan.Models.Degree", "SecondDegree")
                        .WithMany()
                        .HasForeignKey("SecondDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstDegree");

                    b.Navigation("SecondDegree");
                });

            modelBuilder.Entity("DegreeUniversity", b =>
                {
                    b.HasOne("Caifan.Models.Degree", null)
                        .WithMany()
                        .HasForeignKey("DegreesDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caifan.Models.University", null)
                        .WithMany()
                        .HasForeignKey("UniversitiesUniversityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Caifan.Models.Country", b =>
                {
                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Caifan.Models.Region", b =>
                {
                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Caifan.Models.University", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Caifan.Models.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
